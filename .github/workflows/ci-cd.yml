name: CI/CD Pipeline

# 设置工作流权限
permissions:
  contents: write
  pull-requests: write
  issues: write
  packages: write

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Build project
      run: npm run build
    
    - name: Test CLI functionality
      run: |
        # 测试 CLI 是否正常安装和运行
        node lib/index.js --help
        echo "CLI功能测试通过"

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Configure Git
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
    
    - name: Check for changes
      id: check_changes
      run: |
        if git diff --quiet HEAD~1 HEAD -- src/ templates/ package.json; then
          echo "changes=false" >> $GITHUB_OUTPUT
        else
          echo "changes=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Determine version bump
      id: version_bump
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        # 检查提交信息来决定版本类型
        COMMIT_MSG=$(git log -1 --pretty=%B)
        if [[ $COMMIT_MSG == *"BREAKING CHANGE"* ]] || [[ $COMMIT_MSG == *"major"* ]]; then
          echo "bump=major" >> $GITHUB_OUTPUT
        elif [[ $COMMIT_MSG == *"feat"* ]] || [[ $COMMIT_MSG == *"feature"* ]]; then
          echo "bump=minor" >> $GITHUB_OUTPUT
        else
          echo "bump=patch" >> $GITHUB_OUTPUT
        fi
    
    - name: Bump version
      id: bump_version
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        BUMP_TYPE=${{ steps.version_bump.outputs.bump }}
        NEW_VERSION=$(npm version $BUMP_TYPE --no-git-tag-version)
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "新版本: $NEW_VERSION"
    
    - name: Update CHANGELOG
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        VERSION=${{ steps.bump_version.outputs.new_version }}
        DATE=$(date +%Y-%m-%d)
        
        # 创建或更新 CHANGELOG
        if [ ! -f CHANGELOG.md ]; then
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
        fi
        
        # 获取最近的提交信息
        COMMITS=$(git log --oneline HEAD~1..HEAD)
        
        # 在 CHANGELOG 开头插入新版本信息
        {
          echo "# Changelog"
          echo ""
          echo "## [$VERSION] - $DATE"
          echo ""
          echo "### Changes"
          echo "$COMMITS" | sed 's/^/- /'
          echo ""
          tail -n +3 CHANGELOG.md 2>/dev/null || true
        } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
    
    - name: Commit and push changes
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        git add package.json package-lock.json CHANGELOG.md
        git commit -m "chore: release ${{ steps.bump_version.outputs.new_version }} [skip ci]" || exit 0
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref_name }}
    
    - name: Create Git tag
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        git tag ${{ steps.bump_version.outputs.new_version }}
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git ${{ steps.bump_version.outputs.new_version }}
    
    - name: Publish to npm
      if: steps.check_changes.outputs.changes == 'true'
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Create GitHub Release
      if: steps.check_changes.outputs.changes == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.bump_version.outputs.new_version }}
        release_name: Release ${{ steps.bump_version.outputs.new_version }}
        body: |
          ## Changes in ${{ steps.bump_version.outputs.new_version }}
          
          自动发布版本 ${{ steps.bump_version.outputs.new_version }}
          
          查看完整更新日志: [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)
        draft: false
        prerelease: false